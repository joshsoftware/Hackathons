{"version":3,"sources":["assets/init_message.png","core-components/NqInputV.jsx","core-components/NqButton.js","store/StoreOwnerSignUpForm.js","actions/index.js","constants/actionConstants.js","store/StoreOwnerSignUpFormContainer.js","core-components/NqTagSelect.js","constants/optionsConstants.js","constants/apiConstants.js","core-components/NqPlacesAutocompleteSearchBox.js","utils/index.js","store/RegisterForm.js","store/RegisterFormContainer.js","store/LogInForm.js","store/LogInFormContainer.js","core-components/NqCheckbox.js","store/SlotForm.js","store/SlotFormContainer.js","store/HomePage.js","store/StoreListFilter.js","store/StoreList.js","store/StoreListContainer.js","store/AdminStoresContainer.js","store/ViewStoreDetails.js","store/ViewStoreDetailsContainer.js","routes.js","App.js","reducers/index.js","core-components/NqNotification.js","apis/index.js","selectors/index.js","sagas/index.js","serviceWorker.js","index.js","assets/noQ-logo.png","assets/choose_pincode.png","assets/choose_category.png","assets/choose_shop.png","assets/choose_slot.png"],"names":["module","exports","NqInputV","props","className","required","FormGroup","row","Label","for","id","md","labelMd","label","Col","textMd","Input","type","name","placeholder","onChange","handleChange","value","invalid","error","FormFeedback","FormText","formText","NqButton","Button","color","onClick","handleClick","NqButtonSubmit","StoreOwnerSignUpForm","submitHandler","signUpSchema","yup","shape","username","length","matches","password","min","password_confirmation","test","this","parent","Card","CardHeader","CardBody","initialValues","validationSchema","onSubmit","values","body","role_id","errors","touched","handleBlur","handleSubmit","onBlur","setStore","store","setStoreError","setAuthSuccess","data","setAuthFailure","fetchStores","filterParams","setStores","stores","SignUpFormContainer","connect","state","authError","authToken","authenticated","dispatch","newStoreOwnerHandler","user","to","NqTagSelect","errorText","options","isMulti","multiple","defaultValue","WEEK_DAYS","PORTAL_URL","process","PlacesAutoCompleteSearchBox","class","apiKey","onPlaceSelected","place","input","types","componentRestrictions","country","createOptions","list","map","category","code","RegisterForm","categories","optionCategories","schema","address","city","capacity","pincode","duration","opening_time","closing_time","available_days","of","enableReinitialize","setSubmitting","setFieldError","category_ids","daysIndex","day","includes","join","setFieldValue","setFieldTouched","isSubmitting","disabled","RegisterFormContainer","StoreError","createStoreHandler","getCategories","useEffect","LogInForm","logInSchema","LogInFormContainer","isAdmin","storeRegistered","logInHandler","NqCheckbox","useState","checked","setState","check","event","text","SlotForm","slots","slot","index","key","from_time","to_time","sequence","is_active","SlotFormContainer","confirmHandler","setInactiveSlots","inActiveSlots","setInactiveState","ids","active","target","split","splice","indexOf","HomePage","Navbar","Brand","href","src","logo","style","height","Toggle","aria-controls","Collapse","inline","InputGroup","Container","CardTitle","CardText","Row","xs","init_message","choose_pincode","choose_category","choose_shop","choose_slot","StoreListFilter","console","log","StoreList","category_names","deleted_at","data-StoreId","Store","Table","striped","bordered","responsive","StoreListContainer","AdminStoresContainer","getAdminStores","deleteStore","disableStore","deleteAndRefresh","storeid","dataset","confirmAlert","title","message","buttons","ViewStoreDetails","categoriesName","ViewStoreDetailsContainer","getMyStoreDetails","NqRoute","exact","path","App","reducer","action","loading","storeError","auth_token","is_admin","store_registered","NqSuccessNotification","addNotification","insert","container","animationIn","animationOut","dismiss","onScreen","NqErrorNotification","PostApiCall","url","headers","fetch","method","Accept","JSON","stringify","GetApiCall","queryParams","getUrl","qs","URLSearchParams","Object","keys","forEach","set","toString","DeleteApiCall","getJSON","response","json","getToken","authorizedPostApiCall","authorizedGetApiCall","authorizedDeleteApiCall","registerStore","fetchCategories","watcher","rootSaga","addShopOwner","logInUser","fetchAdminStores","getStoreDetails","select","token","call","Authorization","put","takeLatest","takeEvery","all","then","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById","URL","origin","addEventListener","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f9997660.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/init_message.7df2a2e3.png\";","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  FormGroup,\n  Label,\n  Input,\n  FormText,\n  Col,\n  FormFeedback,\n} from \"reactstrap\";\n\nconst NqInputV = (props) => {\n  let className = props.required ? \"required\" : \"\";\n  return (\n    <FormGroup row className={className}>\n      <Label for={props.id} md={props.labelMd || 2}>\n        {props.label}\n      </Label>\n      <Col md={props.textMd || 6}>\n        <Input\n          type={props.type}\n          name={props.name}\n          id={props.id}\n          placeholder={props.placeholder}\n          onChange={props.handleChange}\n          value={props.value}\n          invalid={!!props.error}\n        />\n        <FormFeedback> {props.error}</FormFeedback>\n        <FormText>{props.formText}</FormText>\n      </Col>\n    </FormGroup>\n  );\n};\n\nNqInputV.propTypes = {\n  type: PropTypes.string,\n  label: PropTypes.string,\n  formText: PropTypes.string,\n  placeholder: PropTypes.string,\n  name: PropTypes.string,\n  handleChange: PropTypes.func,\n};\n\nexport default NqInputV;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"reactstrap\";\n\nconst NqButton = (props) => {\n  return (\n    <Button\n      color={props.color}\n      type={props.type}\n      id={props.id}\n      className={props.className}\n      onClick={props.handleClick}\n      {...props}\n    >\n      {props.label}\n    </Button>\n  );\n};\n\nconst NqButtonSubmit = (props) => <NqButton color=\"success\" {...props} />;\n\nNqButton.propTypes = {\n  type: PropTypes.string,\n  label: PropTypes.string,\n  id: PropTypes.string,\n  color: PropTypes.string,\n  handleClick: PropTypes.func,\n};\n\nexport { NqButtonSubmit };\nexport default NqButton;\n","import React from \"react\";\nimport { Formik } from \"formik\";\nimport { Form, Card, CardBody, CardHeader } from \"reactstrap\";\nimport * as yup from \"yup\";\nimport NqInputV from \"core-components/NqInputV\";\nimport { NqButtonSubmit } from \"core-components/NqButton\";\n\nexport const StoreOwnerSignUpForm = ({ submitHandler }) => {\n  let signUpSchema = yup.object().shape({\n    username: yup\n      .string()\n      .required(\"Mobile is a required field\")\n      .length(10, \"Invalid mobile number\")\n      .matches(\"\\\\d{10}\", \"Invalid mobile number\"),\n    password: yup.string().required(\"Password is a required field\").min(6),\n    password_confirmation: yup\n      .string()\n      .required(\"Confirm Password is a required field\")\n      .test(\"passwords-match\", \"Passwords must match\", function (value) {\n        return this.parent.password === value;\n      }),\n  });\n\n  return (\n    <Card>\n      <CardHeader className=\"bg-dark text-light font-weight-bolder\">\n        <h2> Sign up </h2>\n      </CardHeader>\n      <CardBody>\n        <div className=\"container-fluid\">\n          <Formik\n            initialValues={{\n              username: \"\",\n              password: \"\",\n              password_confirmation: \"\",\n            }}\n            validationSchema={signUpSchema}\n            onSubmit={(values) => {\n              let body = { ...values, role_id: 1 };\n              submitHandler(body);\n            }}\n          >\n            {({\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n              //isSubmitting,\n            }) => (\n              <Form onSubmit={handleSubmit}>\n                <NqInputV\n                  id=\"username\"\n                  type=\"text\"\n                  label=\"Mobile\"\n                  formText=\"\"\n                  name=\"username\"\n                  handleChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.username}\n                  error={touched.username && errors.username}\n                  required={true}\n                />\n                <NqInputV\n                  id=\"password\"\n                  type=\"password\"\n                  label=\"Password\"\n                  formText=\"\"\n                  name=\"password\"\n                  handleChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.password}\n                  error={touched.password && errors.password}\n                  required={true}\n                />\n                <NqInputV\n                  id=\"password_confirmation\"\n                  type=\"password\"\n                  label=\"Confirm Password\"\n                  formText=\"\"\n                  name=\"password_confirmation\"\n                  handleChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.password_confirmation}\n                  error={\n                    touched.password_confirmation &&\n                    errors.password_confirmation\n                  }\n                  required={true}\n                />\n                <NqButtonSubmit\n                  id=\"submit\"\n                  type=\"submit\"\n                  label=\"Submit\"\n                  className=\"btn-primary\"\n                  //disabled={isSubmitting}\n                />\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n","import {\n  REGISTER_STORE,\n  SET_STORE_ERROR,\n  SET_SLOTS,\n  ADD_STORE_OWNER,\n  AUTHENTICATION_SUCCESS,\n  AUTHENTICATION_FAILURE,\n  SET_STORE,\n  FETCH_CATEGORIES,\n  SET_CATEGORIES,\n  LOG_IN_USER,\n  SET_INACTIVE_SLOTS,\n  SET_STORES,\n  FETCH_STORES,\n  FETCH_ADMIN_STORES,\n  DISABLE_STORE,\n  GET_STORE_DETAILS,\n} from \"../constants/actionConstants\";\n\nexport const registerStore = (store) => ({\n  type: REGISTER_STORE,\n  store: store,\n});\n\nexport const setStore = (store) => ({\n  type: SET_STORE,\n  store: store,\n});\n\nexport const setStoreError = (error) => ({\n  type: SET_STORE_ERROR,\n  error: error,\n});\n\nexport const addStoreOwner = (owner) => ({\n  type: ADD_STORE_OWNER,\n  user: owner,\n});\n\nexport const setAuthSuccess = (data) => ({\n  type: AUTHENTICATION_SUCCESS,\n  data,\n});\n\nexport const setAuthFailure = (error) => ({\n  type: AUTHENTICATION_FAILURE,\n  error: error,\n});\n\nexport const fetchCategories = () => ({\n  type: FETCH_CATEGORIES,\n});\n\nexport const setCategories = (categories) => ({\n  type: SET_CATEGORIES,\n  categories: categories,\n});\n\nexport const logInUser = (user) => ({\n  type: LOG_IN_USER,\n  user: user,\n});\n\nexport const setInactiveSlots = (slots) => ({\n  type: SET_INACTIVE_SLOTS,\n  slots: slots,\n});\n\nexport const fetchStores = (filterParams) => ({\n  type: FETCH_STORES,\n  filterParams,\n});\n\nexport const setStores = (stores) => ({\n  type: SET_STORES,\n  stores,\n});\n\nexport const fetchAdminStores = () => ({\n  type: FETCH_ADMIN_STORES,\n});\n\nexport const disableStore = (id) => ({\n  type: DISABLE_STORE,\n  id,\n});\n\nexport const getStoreDetails = () => ({\n  type: GET_STORE_DETAILS,\n});\n","export const REGISTER_STORE = \"REGISTER_STORE\";\n\nexport const SET_STORE_ERROR = \"SET_STORE_ERROR\";\n\nexport const SET_SLOTS = \"SET_SLOTS\";\n\nexport const ADD_STORE_OWNER = \"ADD_STORE_OWNER\";\n\nexport const AUTHENTICATION_SUCCESS = \"AUTHENTICATION_SUCCESS\";\n\nexport const AUTHENTICATION_FAILURE = \"AUTHENTICATION_FAILURE\";\n\nexport const SET_STORE = \"SET_STORE\";\n\nexport const FETCH_CATEGORIES = \"FETCH_CATEGORIES\";\n\nexport const SET_CATEGORIES = \"SET_CATEGORIES\";\n\nexport const LOG_IN_USER = \"LOG_IN_USER\";\n\nexport const SET_INACTIVE_SLOTS = \"SET_INACTIVE_SLOTS\";\n\nexport const FETCH_STORES = \"FETCH_STORES\";\n\nexport const SET_STORES = \"SET_STORES\";\n\nexport const GET_STORE_DETAILS = \"GET_STORE_DETAILS\";\n\nexport const FETCH_ADMIN_STORES = \"FETCH_ADMIN_STORES\";\n\nexport const DISABLE_STORE = \"DISABLE_STORE\";\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { StoreOwnerSignUpForm } from \"./StoreOwnerSignUpForm\";\nimport { addStoreOwner } from \"../actions\";\nimport { Redirect } from \"react-router-dom\";\n\nconst storeOwnerSignUpForm = ({\n  authToken,\n  authenticated,\n  newStoreOwnerHandler,\n}) => {\n  if (authenticated) {\n    return <Redirect to={\"/register\"} />;\n  } else {\n    return <StoreOwnerSignUpForm submitHandler={ newStoreOwnerHandler }/>\n  }\n};\n\nconst mapStateToProps = (state) => ({\n  error: state.error && state.error.authError,\n  authToken: state.authToken,\n  authenticated: state.authenticated,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n      newStoreOwnerHandler: (body) => {\n        //body[\"role_id\"] = 1;\n        dispatch(addStoreOwner(body));\n      },\n    };\n};\n\nconst SignUpFormContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(storeOwnerSignUpForm);\n\nexport default SignUpFormContainer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { FormGroup, Label, Col, FormFeedback } from \"reactstrap\";\nimport Select from \"react-select\";\n\nconst NqTagSelect = (props) => {\n  const onChange = (value) => {\n    props.handleChange(props.name, value);\n  };\n\n  const onBlur = (value) => {\n    props.handleBlur(props.name, true);\n  };\n\n  let className = props.required ? \"required\" : \"\";\n\n  return (\n    <FormGroup row className={className}>\n      <Label for={props.id} md={props.labelMd || 2}>\n        {props.label}\n      </Label>\n      <Col md={props.textMd || 6}>\n        <Select\n          value={props.value}\n          onChange={onChange}\n          errorText={props.touched && props.error}\n          options={props.options}\n          isMulti={props.multiple}\n          name={props.name}\n          defaultValue={props.defaultValue}\n          onBlur={onBlur}\n          invalid={!!props.error}\n        />\n        <FormFeedback className=\"d-block\"> {props.error} </FormFeedback>\n      </Col>\n    </FormGroup>\n  );\n};\n\nNqTagSelect.propTypes = {\n  type: PropTypes.string,\n  label: PropTypes.string,\n  formText: PropTypes.string,\n  placeholder: PropTypes.string,\n  name: PropTypes.string,\n  handleChange: PropTypes.func,\n  multiple: PropTypes.bool,\n};\n\nexport default NqTagSelect;\n","export const WEEK_DAYS = [\n  { value: \"0\", label: \"Mon\" },\n  { value: \"1\", label: \"Tue\" },\n  { value: \"2\", label: \"Wed\" },\n  { value: \"3\", label: \"Thu\" },\n  { value: \"4\", label: \"Fri\" },\n  { value: \"5\", label: \"Sat\" },\n  { value: \"6\", label: \"Sun\" },\n];\n\nexport const CATEGORIES = [\n  { value: \"MED\", label: \"MED\" },\n  { value: \"LIQ\", label: \"LIQ\" },\n];\n","export const PORTAL_URL = process.env.REACT_APP_API_BASE_URL;\nexport const USERS_URL = \"/users\";\nexport const SESSIONS_URL = \"/sessions\";\nexport const GOOGLE_API_KEY = process.env.REACT_APP_GOOGLE_API_KEY;\n","import React from \"react\";\nimport { FormGroup, Label, Col } from \"reactstrap\";\nimport ReactGoogleAutocomplete from 'react-google-autocomplete';\nimport { GOOGLE_API_KEY } from \"constants/apiConstants\";\n\nconst PlacesAutoCompleteSearchBox = (props) => {\n    return (\n        <FormGroup row>\n            <Label for={props.id} md={props.labelMd || 2}>\n                {props.label}\n            </Label>\n            <Col md={props.textMd || 6}>\n            <ReactGoogleAutocomplete id= \"address\" class = \"w-100\" \n                apiKey = {GOOGLE_API_KEY}\n                onPlaceSelected={(place, input) => {\n                    props.onPlaceSelected(props.id, input.value , false)\n                }}\n                types={['establishment']}\n                componentRestrictions={{country: \"in\"}}\n            />\n            </Col>\n        </FormGroup>\n    )\n}\n\nexport default PlacesAutoCompleteSearchBox","export const createOptions = (list) =>\n  list.map((category) => ({\n    value: category.id,\n    label: category.code,\n  }));\n","import React from \"react\";\nimport { Formik } from \"formik\";\nimport { Form, Card, CardBody, CardHeader } from \"reactstrap\";\nimport * as yup from \"yup\";\nimport NqInputV from \"core-components/NqInputV\";\nimport NqTagSelect from \"core-components/NqTagSelect\";\nimport { WEEK_DAYS } from \"constants/optionsConstants\";\n\nimport { NqButtonSubmit } from \"core-components/NqButton\";\n\nimport PlacesAutoCompleteSearchBox from \"core-components/NqPlacesAutocompleteSearchBox\";\n\nimport { createOptions } from \"utils\";\n\nconst RegisterForm = ({ submitHandler, categories }) => {\n  let optionCategories = createOptions(categories);\n  let schema = yup.object().shape({\n    name: yup.string().required(),\n    address: yup.string().required(),\n    city: yup.string(),\n    state: yup.string(),\n    capacity: yup.number().required(),\n    pincode: yup.string().required()\n    .length(6, \"Invalid pincode\")\n    .matches('\\\\d{6}', 'Invalid pincode'),\n    duration: yup.number().required(),\n    opening_time: yup.string(),\n    closing_time: yup.string(),\n    available_days: yup\n      .array()\n      .required()\n      .of(\n        yup.object().shape({\n          label: yup.string().required(),\n          value: yup.string().required(),\n        })\n      ),\n    categories: yup\n      .array()\n      .required()\n      .of(\n        yup.object().shape({\n          label: yup.string().required(),\n          value: yup.string().required(),\n        })\n      ),\n  });\n\n  return (\n    <Card>\n      <CardHeader className=\"bg-dark text-light font-weight-bolder\">\n        <h2> Register your store </h2>\n      </CardHeader>\n      <CardBody>\n        <div className=\"container-fluid\">\n          <Formik\n            enableReinitialize={false}\n            initialValues={{\n              name: \"\",\n              address: \"\",\n              city: \"\",\n              state: \"\",\n              pincode: \"\",\n              duration: 5,\n              capacity: 1,\n              opening_time: \"09:00\",\n              closing_time: \"18:00\",\n              categories: [],\n              available_days: WEEK_DAYS,\n            }}\n            validationSchema={schema}\n            onSubmit={(values, { setSubmitting, setFieldError }) => {\n              let store = { ...values };\n              store.category_ids = store.categories.map(\n                (category) => category.value\n              );\n              let daysIndex = store.available_days.map((day) => day.value);\n              store.available_days = WEEK_DAYS.map((day) =>\n                daysIndex.includes(day.value) ? 1 : 0\n              ).join(\"\");\n\n              submitHandler(store);\n            }}\n          >\n            {({\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n              setFieldValue,\n              setFieldTouched,\n              isSubmitting,\n            }) => (\n              <Form onSubmit={handleSubmit}>\n                <NqInputV\n                  id=\"name\"\n                  type=\"text\"\n                  label=\"Name\"\n                  formText=\"Avengers General Store\"\n                  name=\"name\"\n                  handleChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.name}\n                  error={touched.name && errors.name}\n                  required={true}\n                />\n\n                <NqTagSelect\n                  id=\"categories\"\n                  label=\"Category(s)\"\n                  name=\"categories\"\n                  handleBlur={setFieldTouched}\n                  value={values.categories}\n                  options={optionCategories}\n                  multiple={true}\n                  defaultValue={[optionCategories[0]]}\n                  error={touched.categories && errors.categories}\n                  handleChange={setFieldValue}\n                  touched={touched.categories}\n                  required={true}\n                />\n                <PlacesAutoCompleteSearchBox id = \"address\" label= \"Address\" \n                  onPlaceSelected = {setFieldValue}/>\n                \n                <NqInputV\n                  id=\"pincode\"\n                  type=\"text\"\n                  label=\"Pincode\"\n                  formText=\"416003\"\n                  name=\"pincode\"\n                  handleChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.pincode}\n                  error={touched.pincode && errors.pincode}\n                  required={true}\n                />\n                <NqInputV\n                  id=\"opening_time\"\n                  type=\"time\"\n                  label=\"Opening Time\"\n                  name=\"opening_time\"\n                  handleChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values[\"opening_time\"]}\n                  error={touched[\"opening_time\"] && errors[\"opening_time\"]}\n                  required={true}\n                />\n                <NqInputV\n                  id=\"closing_time\"\n                  type=\"time\"\n                  label=\"Closing Time\"\n                  name=\"closing_time\"\n                  handleChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values[\"closing_time\"]}\n                  error={touched[\"closing_time\"] && errors[\"closing_time\"]}\n                  required={true}\n                />\n                <NqInputV\n                  id=\"duration\"\n                  type=\"number\"\n                  label=\"Duration in mins\"\n                  formText=\"5 mins\"\n                  name=\"duration\"\n                  handleChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.duration}\n                  error={touched.duration && errors.duration}\n                  required={true}\n                />\n                <NqInputV\n                  id=\"capacity\"\n                  type=\"number\"\n                  label=\"Capacity\"\n                  formText=\"3\"\n                  name=\"capacity\"\n                  handleChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.capacity}\n                  error={touched.capacity && errors.capacity}\n                  required={true}\n                />\n                <NqTagSelect\n                  id=\"available_days\"\n                  label=\"Available days\"\n                  name=\"available_days\"\n                  handleBlur={setFieldTouched}\n                  value={values[\"available_days\"]}\n                  options={WEEK_DAYS}\n                  multiple={true}\n                  defaultValue={WEEK_DAYS}\n                  error={touched[\"available_days\"] && errors[\"available_days\"]}\n                  handleChange={setFieldValue}\n                  required={true}\n                />\n                <NqButtonSubmit\n                  id=\"submit\"\n                  type=\"submit\"\n                  label=\"Submit\"\n                  className=\"btn-primary\"\n                  disabled={isSubmitting}\n                />\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default RegisterForm;\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\n\nimport RegisterForm from \"./RegisterForm\";\nimport { registerStore, fetchCategories } from \"../actions\";\n\nconst Form = ({\n  getCategories,\n  store,\n  error,\n  createStoreHandler,\n  categories\n}) => {\n  useEffect(() => {\n    getCategories();\n  }, []);\n\n  if (store) {\n    return <Redirect to={\"/slots\"} />;\n  } else {\n    return (\n      <RegisterForm\n        submitHandler={createStoreHandler}\n        error={error}\n        categories={categories}\n      />\n    );\n  }\n};\n\nconst mapStateToProps = (state) => ({\n  error: state.error && state.error.StoreError,\n  store: state.store,\n  categories: state.categories || [],\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  \n  return {\n    createStoreHandler: (body) => {\n      dispatch(registerStore(body));\n    },\n    getCategories: () => {\n      dispatch(fetchCategories());\n    }\n  };\n  \n};\n\nconst RegisterFormContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Form);\n\nexport default RegisterFormContainer;\n","import React from \"react\";\nimport { Formik } from \"formik\";\nimport { Form, Card, CardBody, CardHeader } from \"reactstrap\";\nimport * as yup from \"yup\";\nimport NqInputV from \"core-components/NqInputV\";\nimport { NqButtonSubmit } from \"core-components/NqButton\";\n\nexport const LogInForm = ({ submitHandler }) => {\n  let logInSchema = yup.object().shape({\n    username: yup\n      .string()\n      .required(\"Mobile is a required field\")\n      .length(10, \"Invalid mobile number\")\n      .matches(\"\\\\d{10}\", \"Invalid mobile number\"),\n    password: yup.string().required(\"Password is a required field\"),\n  });\n\n  return (\n    <Card>\n      <CardHeader className=\"bg-dark text-light font-weight-bolder\">\n        <h2> Login </h2>\n      </CardHeader>\n      <CardBody>\n        <div className=\"container-fluid\">\n          <Formik\n            initialValues={{\n              username: \"\",\n              password: \"\",\n            }}\n            validationSchema={logInSchema}\n            onSubmit={(values) => {\n              submitHandler(values);\n            }}\n          >\n            {({\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n            }) => (\n              <Form onSubmit={handleSubmit}>\n                <NqInputV\n                  id=\"username\"\n                  type=\"text\"\n                  label=\"Mobile\"\n                  formText=\"\"\n                  name=\"username\"\n                  handleChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.username}\n                  error={touched.username && errors.username}\n                  required={true}\n                />\n                <NqInputV\n                  id=\"password\"\n                  type=\"password\"\n                  label=\"Password\"\n                  formText=\"\"\n                  name=\"password\"\n                  handleChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.password}\n                  error={touched.password && errors.password}\n                  required={true}\n                />\n                <NqButtonSubmit\n                  id=\"submit\"\n                  type=\"submit\"\n                  label=\"Submit\"\n                  className=\"btn-primary\"\n                  //disabled={isSubmitting}\n                />\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { LogInForm } from \"./LogInForm\";\nimport { logInUser } from \"../actions\";\nimport { Redirect } from \"react-router-dom\";\n\nconst logInForm = ({\n  error,\n  authenticated,\n  logInHandler,\n  isAdmin,\n  storeRegistered,\n}) => {\n  if (isAdmin) {\n    return <Redirect to={\"/admin/stores\"} />;\n  } else if (authenticated) {\n    if (storeRegistered) {\n      return <Redirect to={\"/myStore\"} />;\n    } else {\n      return <Redirect to={\"/register\"} />;\n    }\n  } else {\n    return <LogInForm submitHandler={logInHandler} />;\n  }\n};\n\nconst mapStateToProps = (state) => ({\n  error: state.error && state.error.authError,\n  authToken: state.authToken,\n  authenticated: state.authenticated,\n  isAdmin: state.isAdmin,\n  storeRegistered: state.storeRegistered,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    logInHandler: (body) => {\n      dispatch(logInUser(body));\n    },\n  };\n};\n\nconst LogInFormContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(logInForm);\n\nexport default LogInFormContainer;\n","import React, { useState } from \"react\";\nimport { FormGroup, Label, Col, Input } from \"reactstrap\";\n\nconst NqCheckbox = (props) => {\n  const [checked, setState] = useState(props.checked);\n  const onChange = (event) => {\n    setState(!checked);\n    props.handleChange(event);\n  };\n\n  return (\n    <FormGroup row>\n      <Col md={props.textMd || 6}>\n        <FormGroup check>\n          <Label check>\n            <Input\n              type=\"checkbox\"\n              id={props.id}\n              name={props.name}\n              placeholder={props.placeholder}\n              onChange={onChange}\n              checked={checked}\n            />\n            {props.text}\n          </Label>\n        </FormGroup>\n      </Col>\n    </FormGroup>\n  );\n};\nexport default NqCheckbox;\n","import React from \"react\";\nimport NqCheckbox from \"core-components/NqCheckbox\";\nimport NqButton from \"core-components/NqButton\";\n\nconst slotList = (slots, handleChange) => {\n  return slots.map((slot, index) => (\n    <div className=\"p-2\" key={index}>\n      <NqCheckbox\n        id={slot.name}\n        key={index}\n        text={slot.from_time + \"-\" + slot.to_time}\n        sequence={slot.sequence}\n        name={\"slot-\" + slot.id}\n        handleChange={handleChange}\n        checked={slot.is_active}\n      />\n    </div>\n  ));\n};\n\nconst SlotForm = (props) => {\n  return (\n    <div className=\"container-fluid\">\n      <h1>\n        Your store Code is <b>{props.code}</b>\n      </h1>\n      <p>\n        Select your store's slots and click confirm:-\n        <NqButton\n          className=\"float-right\"\n          label=\"Confirm\"\n          color=\"primary\"\n          handleClick={props.handleSubmit}\n        />\n      </p>\n      <div className=\"d-flex flex-row flex-wrap\">\n        {slotList(props.slots, props.handleChange)}\n      </div>\n    </div>\n  );\n};\n\nexport default SlotForm;\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport SlotForm from \"store/SlotForm\";\nimport { setInactiveSlots } from \"actions\";\n\nconst Form = ({ slots, confirmHandler, code }) => {\n  let [inActiveSlots, setInactiveState] = useState([]);\n\n  const handleSubmit = (body) => {\n    confirmHandler({ ids: inActiveSlots, active: false });\n  };\n\n  const handleChange = (event) => {\n    let id = event.target.name.split(\"-\")[1];\n    slots = [...inActiveSlots];\n\n    if (event.target.checked) {\n      slots.splice(slots.indexOf(id), 1);\n    } else {\n      slots = [...slots, id];\n    }\n    setInactiveState(slots);\n  };\n\n  return (\n    <SlotForm\n      slots={slots}\n      handleSubmit={handleSubmit}\n      handleChange={handleChange}\n      code={code}\n    />\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  slots: state.store.slots,\n  code: state.store.code,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  confirmHandler: (slots) => {\n    dispatch(setInactiveSlots(slots));\n  },\n});\nconst SlotFormContainer = connect(mapStateToProps, mapDispatchToProps)(Form);\n\nexport default SlotFormContainer;\n","import React from \"react\";\nimport {\n  Button,\n  InputGroup,\n  Form,\n  Col,\n  Card,\n  CardBody,\n  CardTitle,\n  Container,\n  Row,\n  CardText,\n} from \"reactstrap\";\nimport logo from \"assets/noQ-logo.png\";\nimport choose_pincode from \"assets/choose_pincode.png\";\nimport choose_category from \"assets/choose_category.png\";\nimport choose_shop from \"assets/choose_shop.png\";\nimport choose_slot from \"assets/choose_slot.png\";\nimport init_message from \"assets/init_message.png\";\nimport Navbar from \"react-bootstrap/Navbar\";\n\nconst HomePage = () => {\n  return (\n    <>\n      <div>\n        <Navbar className=\"bg-dark text-light font-weight-bolder\">\n          <Navbar.Brand href=\"/\">\n            <img src={logo} style={{ height: \"100px\" }} />{\" \"}\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\"></Navbar.Collapse>\n          <Form inline>\n            <InputGroup>\n              <Col>\n                <Button href=\"/signUp\">Register to NoQ</Button>\n                {\" / \"}\n                <Button href=\"/login\">Login</Button>\n                <br />\n              </Col>\n            </InputGroup>\n          </Form>\n        </Navbar>\n      </div>\n      <div>\n        <Container>\n          <Card className=\"border-0\">\n            <CardTitle>\n              <h4>What is NoQ?</h4>\n            </CardTitle>\n            <CardBody>\n              <p>\n                NoQ is a platform which makes day-to-day shopping easy while\n                following social distancing. The user can book a slot for\n                shopping in stores registered on NoQ platform. On successful\n                booking, user will receive an e-Token which can be presented at\n                store on visit.\n                <br />\n                The platform ensures the bookings do not exceed given capacity\n                by store owner so users can enjoy their little trip to the store\n                with safety.\n              </p>\n            </CardBody>\n          </Card>\n          <Card className=\"border-0\">\n            <CardTitle>\n              <h4>How to get e-Token</h4>\n            </CardTitle>\n            <CardText>\n              Follow the 5 easy steps given below to get the e-Token\n            </CardText>\n            <CardBody>\n              <div className=\"container-fluid\">\n                <Row>\n                  <Col md={3} xs={12} className=\"ml-5\">\n                    <h5 className=\"text-center\">Step 1</h5>\n                    <br />\n                    <img src={init_message} className=\"step\"/>\n                    <br />\n                    <br />\n                    <p>\n                      Save the contact <b>917834811114</b> on your phone and\n                      send a WhatsApp to it as <b>PROXY ShopTok</b>\n                      <br />\n                      You will receive a welcome message from NoQ platform.\n                      Initiate the conversation.\n                    </p>\n                    <br />\n                  </Col>\n                  <Col md={2} xs={12}>\n                    <h5 className=\"text-center\">Step 2</h5>\n                    <br />\n                    <img src={choose_pincode} className=\"step\"/>\n                    <br />\n                    <br />\n                    <p>\n                      <b>Provide your area pincode </b> to receive the available\n                      shops for slot booking, once you receive Welcome message\n                      from platform.\n                      <br />\n                      Once pincode is sent, you will receive list of categories\n                      and their codes\n                    </p>\n                    <br />\n                  </Col>\n                  <Col md={2} xs={12}>\n                    <h5 className=\"text-center\">Step 3</h5>\n                    <br />\n                    <img src={choose_category} className=\"step\"/>\n                    <br />\n                    <br />\n                    <p>\n                      <b>Select your category and send the category code</b>\n                      <br />\n                      Based on selected pincode and category, you will receive\n                      list of shops along with their codes available for slot\n                      booking.\n                    </p>\n                    <br />\n                    <br />\n                  </Col>\n                  <Col md={2} xs={12}>\n                    <h5 className=\"text-center\">Step 4</h5>\n                    <br />\n                    <img src={choose_shop} className=\"step\"/>\n                    <br />\n                    <br />\n                    <p>\n                      <b>\n                        To choose a shop, send first three characters of the\n                        shop code.\n                      </b>\n                      <br />\n                      You will now receive today's slots available with store\n                      selected by you for booking\n                    </p>\n                    <br />\n                  </Col>\n                  <Col md={2} xs={12}>\n                    <h5 className=\"text-center\">Step 5</h5>\n                    <br />\n                    <img src={choose_slot} className=\"step\"/>\n                    <br />\n                    <br />\n                    <p>\n                      <b>To select a slot from given list, send slot Id.</b>\n                      <br />\n                      Note: You are allowed to select only one slot at a time\n                      <br />\n                      On successful booking, you will receive your booking\n                      details\n                      <br />\n                    </p>\n                    <br />\n                  </Col>\n                </Row>\n              </div>\n            </CardBody>\n          </Card>\n          <div>\n            Visit the store in your slot and present this e-Token. Enjoy hassle-free shopping, while maintaining social distancing.\n          <br />\n          </div>\n        </Container>\n      </div>\n    </>\n  );\n};\n\nexport default HomePage;\n","import React from \"react\";\nimport { Formik } from \"formik\";\nimport { Form, Card, CardBody, CardHeader } from \"reactstrap\";\nimport * as yup from \"yup\";\n\nimport NqInputV from \"core-components/NqInputV\";\nimport NqTagSelect from \"core-components/NqTagSelect\";\nimport { NqButtonSubmit } from \"core-components/NqButton\";\n\nimport { createOptions } from \"utils\";\n\nconst StoreListFilter = ({ submitHandler, categories }) => {\n  let optionCategories = createOptions(categories || []);\n\n  let schema = yup.object().shape({\n    pincode: yup.string().required(),\n    category_ids: yup.array().of(\n      yup.object().shape({\n        label: yup.string().required(),\n        value: yup.string().required(),\n      })\n    ),\n  });\n\n  return (\n    <Card>\n      <CardHeader className=\"bg-dark text-light font-weight-bolder\">\n        <h2> Find stores near to you </h2>\n      </CardHeader>\n      <CardBody>\n        <div className=\"container-fluid\">\n          <Formik\n            enableReinitialize={false}\n            initialValues={{\n              pincode: \"\",\n            }}\n            validationSchema={schema}\n            onSubmit={(values, { setSubmitting, setFieldError }) => {\n              let store = { ...values };\n              if (store.category_ids) {\n                store.category_ids = store.category_ids\n                  .map((category) => category.value)\n                  .join(\",\");\n              }\n              console.log(store);\n              submitHandler(store);\n            }}\n          >\n            {({\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n              setFieldValue,\n              setFieldTouched,\n              isSubmitting,\n            }) => (\n              <Form onSubmit={handleSubmit}>\n                <NqInputV\n                  id=\"pincode\"\n                  type=\"text\"\n                  label=\"Pincode\"\n                  formText=\"416003\"\n                  name=\"pincode\"\n                  handleChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.pincode}\n                  error={touched.pincode && errors.pincode}\n                  required={true}\n                />\n                <NqTagSelect\n                  id=\"category_ids\"\n                  label=\"Category(s)\"\n                  name=\"category_ids\"\n                  handleBlur={setFieldTouched}\n                  value={values.category_ids}\n                  options={optionCategories}\n                  multiple={true}\n                  error={touched.category_ids && errors.category_ids}\n                  handleChange={setFieldValue}\n                />\n                <NqButtonSubmit\n                  id=\"submit\"\n                  type=\"submit\"\n                  label=\"Filter\"\n                  className=\"btn-primary\"\n                  disabled={isSubmitting}\n                />\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default StoreListFilter;\n","import React from \"react\";\n\nimport { Table } from \"reactstrap\";\nimport \"./table-responsive.css\";\nimport NqButton from \"core-components/NqButton\";\n\nconst Store = (store, index, isAdmin, handleClick) => {\n  return (\n    <tr key={index} className=\"store\">\n      <td>{store.name}</td>\n      <td>{store.address}</td>\n      <td>{store.category_names}</td>\n      <td>{store.pincode}</td>\n      <td>{store.code}</td>\n      {isAdmin && <td>{store.duration}</td>}\n      {isAdmin && !store.deleted_at && (\n        <td>\n          <NqButton\n            handleClick={handleClick}\n            color=\"danger\"\n            data-StoreId={store.id}\n            label=\"Disable\"\n          />\n        </td>\n      )}\n    </tr>\n  );\n};\n\nconst StoreList = ({ stores, isAdmin, handleClick }) => {\n  let list = stores.map((store, index) =>\n    Store(store, index, isAdmin, handleClick)\n  );\n  return (\n    <div className=\"container-fluid\">\n      <Table striped bordered responsive>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Address</th>\n            <th>Categories</th>\n            <th>Pincode</th>\n            <th>Code</th>\n            {isAdmin && <th>Duration</th>}\n            {isAdmin && <th> Disable </th>}\n          </tr>\n        </thead>\n        <tbody>{list}</tbody>\n      </Table>\n    </div>\n  );\n};\n\nexport default StoreList;\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport StoreListFilter from \"./StoreListFilter\";\nimport StoreList from \"./StoreList\";\nimport { fetchStores, fetchCategories } from \"actions\";\n\nconst List = ({ stores, submitHandler, getCategories, categories }) => {\n  useEffect(() => {\n    getCategories();\n  }, []);\n\n  return (\n    <div className=\"fluid-container\">\n      <StoreListFilter submitHandler={submitHandler} categories={categories} />\n      {stores && <StoreList stores={stores} />}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  stores: state.stores,\n  categories: state.categories,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  submitHandler: (filterParams) => {\n    dispatch(fetchStores(filterParams));\n  },\n  getCategories: () => {\n    dispatch(fetchCategories());\n  },\n});\n\nconst StoreListContainer = connect(mapStateToProps, mapDispatchToProps)(List);\n\nexport default StoreListContainer;\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { confirmAlert } from \"react-confirm-alert\";\nimport \"react-confirm-alert/src/react-confirm-alert.css\"; // Import css\n\nimport StoreList from \"./StoreList\";\nimport { fetchStores, fetchAdminStores, disableStore } from \"actions\";\nimport { Redirect } from \"react-router-dom\";\n\nconst List = ({\n  authenticated,\n  stores,\n  submitHandler,\n  getAdminStores,\n  deleteStore,\n}) => {\n  useEffect(() => {\n    getAdminStores();\n  }, []);\n\n  let disable = (event) => {\n    let storeid = event.target.dataset.storeid;\n    confirmAlert({\n      title: \"Confirm to submit\",\n      message: \"Are you sure you want to do this?\",\n      buttons: [\n        {\n          label: \"Yes\",\n          onClick: () => deleteAndRefresh(storeid),\n        },\n        {\n          label: \"No\",\n          onClick: () => console.log(\"clickedno\"),\n        },\n      ],\n    });\n  };\n\n  const deleteAndRefresh = (id) => {\n    deleteStore(id);\n    getAdminStores();\n  };\n\n  if (!authenticated) {\n    return <Redirect to={\"/login\"} />;\n  }\n  console.log(stores);\n  return (\n    <div className=\"fluid-container p-4\">\n      <h1> Store Listing </h1>\n      {stores && (\n        <StoreList stores={stores} isAdmin={true} handleClick={disable} />\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  stores: state.stores,\n  authenticated: state.authenticated,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  submitHandler: (filterParams) => {\n    dispatch(fetchStores(filterParams));\n  },\n  getAdminStores: () => {\n    dispatch(fetchAdminStores());\n  },\n  deleteStore: (id) => {\n    dispatch(disableStore(id));\n  },\n});\n\nconst AdminStoresContainer = connect(mapStateToProps, mapDispatchToProps)(List);\n\nexport default AdminStoresContainer;\n","import React from \"react\";\nimport { Row, Label, Col, Card, CardHeader, CardBody } from \"reactstrap\";\n\nexport const ViewStoreDetails = ({ store }) => {\n  let categoriesName = store.categories.map((category) => category.code);\n  return (\n    <Card>\n      <CardHeader className=\"bg-dark text-light font-weight-bolder\">\n        <h2> Store details </h2>\n      </CardHeader>\n      <CardBody>\n        <div className=\"container-fluid\">\n          <Row>\n            <Col md={6}>\n              <Label>Store Code</Label>\n            </Col>\n            <Col>{store.code}</Col>\n          </Row>\n          <Row>\n            <Col md={6}>\n              <Label>Name</Label>\n            </Col>\n            <Col>{store.name}</Col>\n          </Row>\n          <Row>\n            <Col md={6}>\n              <Label>Address</Label>\n            </Col>\n            <Col>{store.address}</Col>\n          </Row>\n          {/* <Row><Col md={6}><Label>Categories</Label></Col><Col>{store.category_names}</Col></Row> */}\n          <Row>\n            <Col md={6}>\n              <Label>Pincode</Label>\n            </Col>\n            <Col>{store.pincode}</Col>\n          </Row>\n          <Row>\n            <Col md={6}>\n              <Label>Slot Duration</Label>\n            </Col>\n            <Col>{store.duration}</Col>\n          </Row>\n          <Row>\n            <Col md={6}>\n              <Label>Opening time</Label>\n            </Col>\n            <Col>{store.opening_time}</Col>\n          </Row>\n          <Row>\n            <Col md={6}>\n              <Label>Closing time</Label>\n            </Col>\n            <Col>{store.closing_time}</Col>\n          </Row>\n          <Row>\n            <Col md={6}>\n              <Label>Categories</Label>\n            </Col>\n            <Col>{categoriesName}</Col>\n          </Row>\n        </div>\n      </CardBody>\n    </Card>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { ViewStoreDetails } from \"./ViewStoreDetails\";\nimport { getStoreDetails } from \"actions\";\nimport { connect } from \"react-redux\";\nimport HomePage from \"./HomePage\";\n\nconst ViewStore = ({ getMyStoreDetails, store }) => {\n  useEffect(() => {\n    getMyStoreDetails();\n  }, []);\n\n  if (store) {\n    return <ViewStoreDetails store={store} />;\n  } else {\n    return <div>Loading...</div>;\n  }\n};\n\nconst mapStateToProps = (state) => ({\n  error: state.error && state.error.StoreError,\n  store: state.store,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getMyStoreDetails: () => {\n      console.log(\"inside getmy tsore\");\n      dispatch(getStoreDetails());\n    },\n  };\n};\n\nconst ViewStoreDetailsContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ViewStore);\n\nexport default ViewStoreDetailsContainer;\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport SignUpFormContainer from \"./store/StoreOwnerSignUpFormContainer\";\nimport RegisterFormContainer from \"./store/RegisterFormContainer\";\nimport LogInFormContainer from \"store/LogInFormContainer\";\nimport SlotFormContainter from \"store/SlotFormContainer\";\nimport HomePage from \"store/HomePage\";\nimport StoreListContainer from \"store/StoreListContainer\";\nimport AdminStoresContainer from \"store/AdminStoresContainer\";\nimport ViewStoreDetailsContainer from \"store/ViewStoreDetailsContainer\";\n\nconst NqRoute = () => {\n  return (\n    <>\n      <Route exact path=\"/\">\n        <HomePage />\n      </Route>\n      <Route exact path=\"/login\">\n        <LogInFormContainer />\n      </Route>\n      <Route exact path=\"/signUp\">\n        <SignUpFormContainer />\n      </Route>\n      <Route exact path=\"/register\">\n        <RegisterFormContainer />\n      </Route>\n      <Route exact path=\"/slots\">\n        <SlotFormContainter />\n      </Route>\n      <Route exact path=\"/stores\">\n        <StoreListContainer />\n      </Route>\n      <Route exact path=\"/admin/stores\">\n        <AdminStoresContainer />\n      </Route>\n      <Route exact path=\"/myStore\">\n        <ViewStoreDetailsContainer />\n      </Route>\n    </>\n  );\n};\n\nexport default NqRoute;\n","import React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./App.css\";\nimport ReactNotification from \"react-notifications-component\";\n\nimport NqRoute from \"./routes.js\";\n\n\nfunction App() {\n  return (\n    \n    <BrowserRouter>\n      <ReactNotification/>\n       <NqRoute />\n      <div className=\"App\">\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import {\n  REGISTER_STORE,\n  SET_STORE_ERROR,\n  SET_SLOTS,\n  ADD_STORE_OWNER,\n  AUTHENTICATION_SUCCESS,\n  AUTHENTICATION_FAILURE,\n  SET_STORE,\n  SET_CATEGORIES,\n  LOG_IN_USER,\n  SET_INACTIVE_SLOTS,\n  SET_STORES,\n} from \"../constants/actionConstants\";\n\nconst reducer = (state = {}, action) => {\n  console.log(\"inside reducer\");\n  console.log(action);\n\n  switch (action.type) {\n    case SET_STORE:\n      return {\n        ...state,\n        store: action.store,\n        loading: false,\n      };\n    case SET_STORE_ERROR:\n      return {\n        ...state,\n        error: { ...state.error, storeError: action.error },\n        loading: false,\n      };\n    case REGISTER_STORE:\n      return {\n        ...state,\n        loading: true,\n      };\n\n    case ADD_STORE_OWNER:\n    case LOG_IN_USER:\n      return {\n        ...state,\n        loading: true,\n      };\n\n    case AUTHENTICATION_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        authenticated: true,\n        authToken: action.data.auth_token,\n        isAdmin: action.data.is_admin,\n        storeRegistered: action.data.store_registered,\n      };\n\n    case AUTHENTICATION_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        authenticated: false,\n        isSubmitting: false,\n        error: { ...state.error, authError: action.error },\n      };\n    case SET_CATEGORIES:\n      return {\n        ...state,\n        categories: action.categories,\n        loading: false,\n      };\n    case SET_INACTIVE_SLOTS:\n      return {\n        ...state,\n      };\n    case SET_STORES:\n      return {\n        ...state,\n        stores: action.stores,\n      };\n\n    default:\n      return state;\n  }\n};\nexport default reducer;\n","import { store } from \"react-notifications-component\";\n\nexport const NqSuccessNotification = (message) => {\n  store.addNotification({\n    title: \"Yipee\",\n    message: message,\n    type: \"success\",\n    insert: \"top\",\n    container: \"top-right\",\n    animationIn: [\"animated\", \"fadeIn\"],\n    animationOut: [\"animated\", \"fadeOut\"],\n    dismiss: {\n      duration: 1000,\n      onScreen: true,\n    },\n  });\n};\n\nexport const NqErrorNotification = (message) => {\n  store.addNotification({\n    title: \"Error\",\n    message: message,\n    type: \"danger\",\n    insert: \"top\",\n    container: \"top-right\",\n    animationIn: [\"animated\", \"fadeIn\"],\n    animationOut: [\"animated\", \"fadeOut\"],\n    dismiss: {\n      duration: 1000,\n      onScreen: true,\n    },\n  });\n};\n","import { PORTAL_URL } from \"constants/apiConstants\";\n\nexport const PostApiCall = (url, body, headers = {}) => {\n  return fetch(PORTAL_URL + url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/no-q.com; version=1\",\n      ...headers,\n    },\n    body: JSON.stringify(body),\n  });\n};\n\nexport const GetApiCall = (url, queryParams = {}, headers = {}) => {\n  let getUrl = PORTAL_URL + url;\n  if (queryParams) {\n    let qs = new URLSearchParams();\n    Object.keys(queryParams).forEach((key) => qs.set(key, queryParams[key]));\n    getUrl = getUrl + \"?\" + qs.toString();\n  }\n\n  return fetch(getUrl, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/no-q.com; version=1\",\n      ...headers,\n    },\n  });\n};\n\nexport const DeleteApiCall = (url, headers) => {\n  return fetch(PORTAL_URL + url, {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/no-q.com; version=1\",\n      ...headers,\n    },\n  });\n};\n\nexport const getJSON = (response) => response.json();\n","export const getToken = (state) => state.authToken;\n","import {\n  put,\n  takeLatest,\n  takeEvery,\n  all,\n  call,\n  select,\n} from \"redux-saga/effects\";\nimport { setAuthSuccess, setAuthFailure } from \"actions\";\nimport { USERS_URL, SESSIONS_URL } from \"constants/apiConstants\";\nimport { setStore, setStoreError, setCategories, setStores } from \"actions\";\nimport {\n  REGISTER_STORE,\n  FETCH_CATEGORIES,\n  SET_INACTIVE_SLOTS,\n  ADD_STORE_OWNER,\n  LOG_IN_USER,\n  FETCH_STORES,\n  FETCH_ADMIN_STORES,\n  DISABLE_STORE,\n  GET_STORE_DETAILS,\n} from \"constants/actionConstants\";\nimport {\n  NqSuccessNotification,\n  NqErrorNotification,\n} from \"core-components/NqNotification\";\nimport { PostApiCall, GetApiCall, DeleteApiCall, getJSON } from \"apis\";\nimport { getToken } from \"../selectors\";\n\nfunction* authorizedPostApiCall(url, body) {\n  const token = yield select(getToken);\n  const json = yield call(PostApiCall, url, body, { Authorization: token });\n\n  const response = yield call(getJSON, json);\n\n  return response;\n}\n\nfunction* authorizedGetApiCall(url, filterParams) {\n  const token = yield select(getToken);\n\n  const json = yield call(GetApiCall, url, filterParams, {\n    Authorization: token,\n  });\n\n  const response = yield call(getJSON, json);\n\n  return response;\n}\n\nfunction* authorizedDeleteApiCall(url) {\n  const token = yield select(getToken);\n\n  const json = yield call(DeleteApiCall, url, {\n    Authorization: token,\n  });\n\n  return json;\n}\n\nfunction* registerStore(store) {\n  try {\n    const json = yield call(authorizedPostApiCall, \"/stores\", store);\n    if (json.data) {\n      console.log(\"response received\");\n      console.log(json.data);\n      yield put(setStore(json.data));\n      yield call(NqSuccessNotification, json.message);\n    } else {\n      yield put(setStoreError(json.error));\n      yield call(NqErrorNotification, json.message);\n    }\n  } catch (error) {\n    yield put(setStoreError(error));\n  }\n}\n\nfunction* fetchCategories() {\n  try {\n    const response = yield call(GetApiCall, \"/categories\");\n    const json = yield call(getJSON, response);\n\n    if (json.data) {\n      console.log(\"categories fetched\");\n      console.log(json.data);\n      yield put(setCategories(json.data));\n    }\n  } catch (error) {\n    console.log(\"fetching categories\");\n    console.log(error);\n  }\n}\n\nfunction* setInactiveSlots(slots) {\n  try {\n    const json = yield call(authorizedPostApiCall, \"/slots/mark\", slots);\n    if (json.data) {\n      console.log(\"successfully set inactive\");\n      console.log(json.data);\n      yield call(NqSuccessNotification, json.message);\n    }\n  } catch (error) {\n    console.log(\"error while setting \");\n  }\n}\n\nfunction* watcher() {\n  yield takeLatest(REGISTER_STORE, registerStore);\n  yield takeLatest(FETCH_CATEGORIES, fetchCategories);\n  yield takeLatest(SET_INACTIVE_SLOTS, setInactiveSlots);\n  yield takeLatest(ADD_STORE_OWNER, addShopOwner);\n  yield takeLatest(LOG_IN_USER, logInUser);\n  yield takeLatest(FETCH_STORES, fetchStores);\n  yield takeLatest(FETCH_ADMIN_STORES, fetchAdminStores);\n  yield takeEvery(DISABLE_STORE, disableStore);\n  yield takeLatest(GET_STORE_DETAILS, getStoreDetails);\n}\n\nexport default function* rootSaga() {\n  yield all([watcher()]);\n}\n\nfunction* addShopOwner(body) {\n  try {\n    const json = yield PostApiCall(USERS_URL, body).then((response) => {\n      return response.json();\n    });\n    if (json.data.auth_token) {\n      yield put(setAuthSuccess(json.data.auth_token));\n    } else {\n      yield put(setAuthFailure(json.message));\n      yield call(NqErrorNotification, json.message.join(\".\"));\n    }\n  } catch (error) {\n    yield put(setAuthFailure(error));\n  }\n}\n\nfunction* logInUser(data) {\n  try {\n    var body = { user: data.user };\n    const json = yield PostApiCall(SESSIONS_URL, body).then((response) => {\n      return response.json();\n    });\n    if (json.data.auth_token) {\n      yield put(setAuthSuccess(json.data));\n    } else {\n      yield put(setAuthFailure(json.message));\n      yield call(NqErrorNotification, json.message);\n    }\n  } catch (error) {\n    yield put(setAuthFailure(error));\n  }\n}\n\nfunction* fetchStores(data) {\n  try {\n    const response = yield call(GetApiCall, \"/stores\", data.filterParams);\n    const json = yield call(getJSON, response);\n\n    if (json.data) {\n      console.log(\"stores fetched\");\n      console.log(json.data);\n      yield put(setStores(json.data));\n    }\n  } catch (error) {\n    console.log(\"fetching stores\");\n    console.log(error);\n  }\n}\n\nfunction* fetchAdminStores(data) {\n  try {\n    const json = yield call(\n      authorizedGetApiCall,\n      \"/admin/stores\",\n      data.filterParams\n    );\n\n    if (json.data) {\n      console.log(\"stores fetched\");\n      console.log(json.data);\n      yield put(setStores(json.data));\n    }\n  } catch (error) {\n    console.log(\"fetching stores\");\n    console.log(error);\n  }\n}\n\nfunction* disableStore(data) {\n  const json = yield call(\n    authorizedDeleteApiCall,\n    \"/admin/disable_store/\" + data.id\n  );\n}\n\nfunction* getStoreDetails() {\n  try {\n    console.log(\"get store details\");\n    const json = yield call(authorizedGetApiCall, \"/stores/list\");\n\n    if (json.data) {\n      console.log(\"store fetched\");\n      console.log(json.data);\n      yield put(setStore(json.data));\n    }\n  } catch (error) {\n    console.log(\"fetching stores\");\n    console.log(error);\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nimport \"./index.css\";\nimport \"react-notifications-component/dist/theme.css\";\n\nimport App from \"./App\";\nimport reducer from \"./reducers\";\nimport rootSaga from \"./sagas\";\n\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(reducer, applyMiddleware(sagaMiddleware));\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/noQ-logo.bbe3b39a.png\";","module.exports = __webpack_public_path__ + \"static/media/choose_pincode.4a55079f.png\";","module.exports = __webpack_public_path__ + \"static/media/choose_category.4e1e235f.png\";","module.exports = __webpack_public_path__ + \"static/media/choose_shop.2391d238.png\";","module.exports = __webpack_public_path__ + \"static/media/choose_slot.1b0433f5.png\";"],"sourceRoot":""}